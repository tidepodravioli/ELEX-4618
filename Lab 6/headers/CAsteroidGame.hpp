#include <../Common/CBase4618.hpp>
#include <headers/CAsteroid.hpp>
#include <headers/CMissle.hpp>
#include <headers/CShip.hpp>
#include <../Common/CJoystickPosition.hpp>

#include <vector>
#include <thread>

#include <chrono>

#define BUTTON_DEBOUNCE_TIMEOUT 250 ///< Debounce for the buttons in gpio (in ms)

#define CASTEROIDGAME_PROGRAM_TITLE "Lab 6 - Asteroids" ///< The name to put at the top of the window
#define CASTEROIDGAME_MAX_ASTEROIDS 100 ///< Maximum amount of asteroids allowed on the game field
#define CASTEROIDGAME_NEXT_ASTEROID 600 ///< Time to wait until the next asteroid is generated (in milliseconds)
#define CASTEROIDGAME_SERIAL_TIME_MAX 10 ///< How long (in seconds) it should be until the game thinks the serial is inactive
#define CASTEROIDGAME_MAX_SERIAL_ERRORS 10 ///< How many serial errors to tolerate until the serial should reconnect

using namespace cv;
using namespace std;

/**
 * @brief The Lab 6 Asteroid game, based on the CBase4618 class
 * 
 */
class CAsteroidGame : CBase4618
{
    private:
    /**
     * @brief Construct a new CAsteroidGame object
     * The default constructor is hidden to ensure that CAsteroidGame is constructed with a Size
     */
    CAsteroidGame();

    CJoystickPosition m_currentPosition; ///< The current position of the joystick as a CJoystickPosition
    bool m_S1pressed = false; ///< Whether or not S1 was detected to have been pressed
    bool m_S2pressed = false; ///< Whether or not S2 was detected to have been pressed
    Size m_canvasSize; ///< The size of the canvas, as given when the object was constructed
    CShip * m_ship; ///< The object representing the ship on the screen
    vector<CMissle> m_missles; ///< The vector holding all of the missles that currently exist on the screen
    vector<CAsteroid> m_asteroids; ///< The vector holding all of the asteroids that currently exist on the screen

    chrono::system_clock::time_point m_timeNextAsteroid; ///< The system_clock time that the next asteroid will be spawned at
    chrono::system_clock::time_point m_timeLastGPIO; ///< The last time the GPIO relevant variables were updated

    bool m_flagEndProgram = false; ///< Flag that ends the program if true
    bool m_flagGameOver = false; ///< Flag that ends the game if true
    bool m_flagGameReset = false; ///< Flag that resets the game if true
    bool m_flagGenerateAsteroid = true; ///< Flag that causes the game to see if it can start spawning a new asteroid if true
    bool m_flagSerialConnected = false; ///< Flag that indicates to the game if the serial is connected or not
    
    int m_playerScore = 0; ///< The current score of the ongoing game

    /**
     * @brief Sets up or reconnects the GPIO
     * 
     */
    void setupGPIO();

    /**
     * @brief Draws the UI on 'm_canvas'
     * 
     */
    void drawUI();

    /**
     * @brief Updates the acceleration of the ship based on the position of the joystick
     * 
     */
    void updateShipAccel();

    /**
     * @brief Generates a new missle at the current position of the head of the ship
     * 
     */
    void generateMissle();

    /**
     * @brief Updates each missle
     * 
     */
    void updateMissle();

    /**
     * @brief Generates a new asteroid at the top of the screen
     * 
     */
    void generateAsteroid();

    /**
     * @brief Draws text in the middle of the screen for the user to see.
     * Code generated by ChatGPT.
     * 
     * @param img the Mat to put the text on
     * @param text the text to put on the Mat
     * @param fontFace the font to use
     * @param fontScale the size of the font to display
     * @param color the color of the text
     * @param thickness the thickness of the text
     */
    void drawCenteredText(cv::Mat &img, const std::string &text, int fontFace = cv::FONT_HERSHEY_SIMPLEX,
        double fontScale = 0.5, cv::Scalar color = cv::Scalar(255, 255, 255), int thickness = 1);
    
    public:

    /**
     * @brief Construct a new CAsteroidGame object with a given size of window
     * 
     * @param canvasSize the size of the window to draw the game on
     */
    CAsteroidGame(Size canvasSize);
    
    /**
     * @brief Handles the GPIO communication between the program and the microcontroller
     * 
     */
    void gpio();

    /**
     * @brief Updates the game based on new parameters
     * 
     */
    void update();

    /**
     * @brief Draws the new frame based on the new update
     * 
     */
    void draw();

    /**
     * @brief Starts the game
     * 
     */
    void run();

    /**
     * @brief Resets the game to its initial state
     * 
     */
    void reset();

    /**
     * @brief Multithreading for gpio()
     * 
     */
    void thread_gpio();

    /**
     * @brief Multithreading for update()
     * 
     */
    void thread_update();
};